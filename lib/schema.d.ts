/** npx openapi-typescript http://localhost:8080/v3/api-docs -o lib/schema.d.ts
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/administrasjon/visning": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * Oppdatere visning
     * @description Oppdatere visning. Kan gjøres så lenge det ikke er solgt billetter til visningen.
     */
    put: operations["oppdatereVisning"];
    /**
     * Registrere visning
     * @description Registrere visning.
     */
    post: operations["registrereVisning"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/kunde/billett": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Bestille billett
     * @description Velge plasser og mottar en unik billettkode ved bekreftelse.
     */
    post: operations["bestilleBillett"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/kinobetjent/billett": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Direkte registrering av billetter
     * @description Betjenten kan selge ledige billetter direkte til kunder i kinoen.
     */
    post: operations["registrereBillett"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/kinobetjent/billett/{billettkode}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Registrere betaling av forhåndsbestilt billett
     * @description Betjenten kan registrere at en forhåndsbestilt billett er betalt ved fysisk oppmøte.
     */
    post: operations["registrereBetaling"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/administrasjon/film": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Registrere film
     * @description Registrere film.
     */
    post: operations["registrereFilm"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/kunde/visning": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Tilgjengjelige visninger
     * @description Kunden får vist tilgjengelige visninger(der det er minst 30 minutter igjen til start)
     */
    get: operations["hentTilgjengeligeVisninger"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/kinobetjent/billett/{visningnr}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Slette ubetalte bestillinger
     * @description Betjenten kan, 30 minutter før visningsstart, starte en prosess som sletter alle ubetalte bestillinger for en spesifikk visning.
     */
    delete: operations["sletteUbetalteBestillinger"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/administrasjon/visning/{visningnr}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Slette visning
     * @description Sletter en visning. Kan gjøres så lenge det ikke er solgt billetter til visningen.
     */
    delete: operations["sletteVisning"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    Billett: {
      billettkode?: string;
      visning?: components["schemas"]["Visning"];
      erBetalt?: boolean;
    };
    ErrorResponse: {
      /** Format: int32 */
      status?: number;
      message?: string;
      path?: string;
      /** Format: date-time */
      timestamp?: string;
      link?: string;
    };
    Film: {
      /** Format: int64 */
      filmnr?: number;
      /** @example Echoes of Tomorrow */
      filmnavn?: string;
    };
    Kinosal: {
      /** Format: int32 */
      kinosalnr?: number;
      kinonavn?: string;
      kinosalnavn?: string;
    };
    LocalTime: {
      /** Format: int32 */
      hour?: number;
      /** Format: int32 */
      minute?: number;
      /** Format: int32 */
      second?: number;
      /** Format: int32 */
      nano?: number;
    };
    RegistrereBillett: {
      /** Format: int32 */
      visningnr?: number;
      registrerePlasser?: components["schemas"]["RegistrerePlasser"][];
    };
    RegistrerePlasser: {
      /** Format: int32 */
      radnr?: number;
      /** Format: int32 */
      setenr?: number;
    };
    Visning: {
      /** Format: int32 */
      visningnr?: number;
      film?: components["schemas"]["Film"];
      kinosal?: components["schemas"]["Kinosal"];
      /** Format: date */
      dato?: string;
      starttid?: components["schemas"]["LocalTime"];
      pris?: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  oppdatereVisning: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Visning"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  registrereVisning: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Visning"];
      };
    };
    responses: {
      /** @description successful operation */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  bestilleBillett: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegistrereBillett"];
      };
    };
    responses: {
      /** @description successful operation */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Billett"];
        };
      };
    };
  };
  registrereBillett: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegistrereBillett"];
      };
    };
    responses: {
      /** @description successful operation */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Billett"];
        };
      };
    };
  };
  registrereBetaling: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        billettkode: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  registrereFilm: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Film"];
      };
    };
    responses: {
      /** @description successful operation */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  hentTilgjengeligeVisninger: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Visning"][];
        };
      };
    };
  };
  sletteUbetalteBestillinger: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        visningnr: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  sletteVisning: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        visningnr: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
}
